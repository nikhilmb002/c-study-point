				Strucure
				--------

structure is one of the user defined datatype. Which is collection of different types of data, which are in contiguous memory locations.

The struct keyword is used to define structure in C.

The items in the structure are called its member and they can eb of any valid data type.


Syntax : 
	
	struct tagname{

		member_one;
		
		member_two;

		member three;
	};



example : 

	struct one{			// structure declaration 

		int i;			

		char ch;

		float f;
	};

	void main(){
	
		struc one v;		// variable creation 
		
		v.i = 10;

		v.ch = 'a';
	
		v.f = 45;

	}

There is no memory allocation at the time of structure declaration.

At the time of variable creation memory is allocated.


Can we initialize structure ?

No, there is no memory allocation at the time structure declaration


Can we provide storage type to struct member?

No, when struct variable creation time only memory allocation happens.


Can we provide storage type to struct variable ?

Yes


Structure Defnition
-------------------

1. Structure variable declaration with structure template

 	struct tagname{
	
		datatype member_one_name;

		datatype member_two_name;
		
		........................

		.......................		

	}varaible1, varaible2, ....;


2. Structure variable declaration after structure template

	struct tagname{
	
		datatype member_one_name;

		datatype member_two_name;

		........................

		........................
	}

	struct tagname variable1, variable2, ...........;







Nested Structure
----------------

In one of the structure, some of the members are variable of another structure, such a type of structure treated as a nested structure


Self referential structure
--------------------------

In a structure if one of the member is a pointer of a same structure type, such a type of structure is called as a self referential structure.

This type of structure are very helpful in a datastructure, linkedlist.


example: 

	struct student{

		int rollno;

		char name[20];

		float marks;

		struct student *next;
	};






















































