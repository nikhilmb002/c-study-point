			DATATYPES
			---------


How the compiler recognises the constant ?

content in the single quote are considered as character constant

example : 'a', '1'

  123 -> decimal 

0x123 -> Hexadecimal

 0123 -> Octal

	

'1'  -> char constant

  1  -> int constant

"1"  -> string constant

1.0  -> double constant

1.0f -> float constant


Most of the time we need to deal with variable type of data.

If we want to deal with variable type of data first we need to declare a variable.

We can declare a variable in our program in 2 places.

If we declare the variable above the main function, it is called as the global variable.

If we declare a variable with in a main function it is called as local variable.



How to declare a variable ?


syntax : 

	datatype variablename;
	
	storage_class type_qualifier size_type sign_type data_type variable_name;


storage classes -> 1. auto 

		   2. static

		   3. extern

		   4. register


type qualifier ->  1. const

		   2. volatile


size type      ->  1. short

		   2. long

		   3. long long


sign type      ->  1. unsigned

		   2. signed



Why to declare a variable ?

	To store variable nature of data.


int num1 ;   -> no error

int 1num ;   -> error :- variable name doesn't start with digits 

int num_1 ;  -> no error

int num@1 ;  -> error :- only _ is only the allowed specail character while naming variable in c

int _num1 ;  -> no error

int _1num ;  -> no error





char datatype
-------------

1. unsigned char   :- all 8 bits are data bits

	range -> 0 to 255

2. signed char     :- 1 bit is sign bit, 7 bits are data bits

	range -> -128 to 127


while declaring the variables if we are not written the sign type by default compiler will consider as signed.



how a -ve number is stored ?

	in it's 2s compliment method


what is 2's compliment

	1's compliment + 1


			
	ch = 200



			unsigned char				signed char


ch 			    97     				    97

ch = ch + 3    		   100					   100

ch = ch * 2  		   200					   -56

ch = ch + 60 		    4					    4






integer datatype
----------------
			
1. char		->  1 byte  %c

2. short	->  2 bytes %hd,  %hu

3. long		->  4 bytes(32 bit system) 8 bytes(64 bit system) %ld, %lu

4. long long	->  8 bytes %lld, %llu

5. int 		->  4 bytes %d, %u


in 32 bit system int and long int is same

in 64 bit os long int and long long int is same



As ac programer we can request the compiler how much memory we need, but we cannot request the particular address location.

%p is the format specifier to print the address of a variable.



In a given memeory location the data is stored in 2 ways. It depends on the byte ordering are also called as endiannes.

There are 2 types of byte ordering

1. Little endian 

2. Big endian

In little endian, LSB is stored in a given lower address.

In big endian, LSB is stores in a given higher address.



























